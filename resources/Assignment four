import csv
import json
import matplotlib.pyplot as plt
from datetime import datetime

class Book:
    def __init__(self, title, author, isbn, year, category):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.year = year
        self.category = category

    def __str__(self):
        return f"{self.title} by {self.author} ({self.year})"

class Library:
    def __init__(self):
        self.books = []

    def add_book(self, book):
        self.books.append(book)

    def remove_book(self, isbn):
        self.books = [book for book in self.books if book.isbn != isbn]

    def get_book(self, isbn):
        for book in self.books:
            if book.isbn == isbn:
                return book
        return None

    def edit_book(self, isbn, title=None, author=None, year=None, category=None):
        book = self.get_book(isbn)
        if book:
            if title:
                book.title = title
            if author:
                book.author = author
            if year:
                book.year = year
            if category:
                book.category = category
            return True
        return False

    def list_books(self):
        for book in self.books:
            print(book)

    def load_from_csv(self, filename):
        with open(filename, 'r') as f:
            reader = csv.reader(f)
            next(reader)  # Skip header
            for row in reader:
                self.add_book(Book(row[0], row[1], row[2], int(row[3]), row[4]))

    def load_from_json(self, filename):
        with open(filename, 'r') as f:
            data = json.load(f)
            for book_data in data:
                self.add_book(Book(**book_data))

    def save_to_json(self, filename):
        data = [{"title": book.title, "author": book.author, "isbn": book.isbn, 
                 "year": book.year, "category": book.category} for book in self.books]
        with open(filename, 'w') as f:
            json.dump(data, f, indent=2)

    def visualize_categories(self):
        categories = {}
        for book in self.books:
            categories[book.category] = categories.get(book.category, 0) + 1
        
        plt.figure(figsize=(10, 6))
        plt.bar(categories.keys(), categories.values())
        plt.title('Books by Category')
        plt.xlabel('Category')
        plt.ylabel('Number of Books')
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()

class LibraryManager:
    def __init__(self):
        self.library = Library()

    def run(self):
        while True:
            self.display_menu()
            choice = input("Enter your choice: ")
            self.process_choice(choice)

    def display_menu(self):
        print("\n--- Library Collection Manager ---")
        print("1. Add a book")
        print("2. Remove a book")
        print("3. Edit a book")
        print("4. List all books")
        print("5. Search for a book")
        print("6. Load books from CSV")
        print("7. Load books from JSON")
        print("8. Save books to JSON")
        print("9. Visualize book categories")
        print("0. Exit")

    def process_choice(self, choice):
        if choice == '1':
            self.add_book()
        elif choice == '2':
            self.remove_book()
        elif choice == '3':
            self.edit_book()
        elif choice == '4':
            self.library.list_books()
        elif choice == '5':
            self.search_book()
        elif choice == '6':
            filename = input("Enter CSV filename: ")
            self.library.load_from_csv(filename)
        elif choice == '7':
            filename = input("Enter JSON filename: ")
            self.library.load_from_json(filename)
        elif choice == '8':
            filename = input("Enter JSON filename to save: ")
            self.library.save_to_json(filename)
        elif choice == '9':
            self.library.visualize_categories()
        elif choice == '0':
            print("Thank you for using the Library Collection Manager.")
            exit()
        else:
            print("Invalid choice. Please try again.")

    def add_book(self):
        title = input("Enter book title: ")
        author = input("Enter author name: ")
        isbn = input("Enter ISBN: ")
        year = int(input("Enter publication year: "))
        category = input("Enter book category: ")
        book = Book(title, author, isbn, year, category)
        self.library.add_book(book)
        print("Book added successfully.")

    def remove_book(self):
        isbn = input("Enter ISBN of the book to remove: ")
        self.library.remove_book(isbn)
        print("Book removed successfully.")

    def edit_book(self):
        isbn = input("Enter ISBN of the book to edit: ")
        title = input("Enter new title (or press Enter to skip): ")
        author = input("Enter new author (or press Enter to skip): ")
        year = input("Enter new year (or press Enter to skip): ")
        category = input("Enter new category (or press Enter to skip): ")
        
        if year and not year.isdigit():
            print("Invalid year. Book not updated.")
            return

        success = self.library.edit_book(
            isbn, 
            title if title else None,
            author if author else None,
            int(year) if year else None,
            category if category else None
        )
        
        if success:
            print("Book updated successfully.")
        else:
            print("Book not found.")

    def search_book(self):
        isbn = input("Enter ISBN of the book to search: ")
        book = self.library.get_book(isbn)
        if book:
            print(book)
        else:
            print("Book not found.")

if __name__ == "__main__":
    manager = LibraryManager()
    manager.run()

button = widgets.Button(
    description='Click me',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Click me',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)
button
